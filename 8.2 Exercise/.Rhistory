1+1
1+2+3
3*7*2
4/2
4/3
x<-4
x
rm(x)
x
i<-5L
i
is.integer(i)
nchar('harlan')
5:-7
?+
6
apropos("mea")
x>-10:1
x <- 10:1
y <- -4:5
q <-c("Hockey","Football","Baseball","Curling","Rugby","Lacrosse","Basketball","Tennis","Cricket","soccer")
theDF <-data.fram(c,y,q)
theDF <-data.fame(x,y,q)
theDF <-data.frame(x,y,q)
theDF
theDF <-data.frame(First=x,Second=y,Sport=q)
theDF
theDF[,3]
list(1,2,3)
theUrl<-"http://www.jaredlander.com/data/TomatoFirst.csv"
tomato<-read.table(file=theUrl,header=TRUE,sep=",")
head(tomato)
download.file("http://www.jaredlander.com/data/diamonds.db", destfile="data/diamonds.db",mode='wb')
download.file("http://www.jaredlander.com/data/diamonds.db", destfile="data/diamonds.db",mode='wb')
download.file("http://www.jaredlander.com/data/diamonds.db", destfile="diamonds.db",mode='wb')
install.packages('dbplyr')
diaDBSource2<-DBI::dbConnect(RSQLite::SQLite(),"diamonds.db")
View(diaDBSource2)
<SQLiteConnection>
<SQLiteConnection>
SQLiteConnection
diaTab <-tbl(diaDBSource2,"diamonds")
library('dplyr')
diaTab <-tbl(diaDBSource2,"diamonds")
diaTab
diaTab %>% group_by(cut) %>% dplyr::summarize(Price=mean(price))
install.packages('purrr')
theList <-(A=matrix(1:9,3),B=1:5,C=matrix(1:4,2),D=2)
theList <-(A=matrix(1:9,3),B=1:5,C=matrix(1:4,2),D=2)
theList <-list(A=matrix(1:9,3),B=1:5,C=matrix(1:4,2),D=2)
lapply(theList,sum)
library(purrr)
theList %>% map(sum)
theList2 <- theList
theList2[[1]][2,1] <-NA
theList2[[2]][4]<-NA
theList2
theList2 %>% map(function(x)sum(x,na.rm=TRUE))
theList <-list(A=matrix(1:9,3),B=1:5,C=matrix(1:4,2),D=2)
theList2
theList2 %>% map(sum,na.rm=TRUE))
theList2 %>% map(sum,na.rm=TRUE)
theList %>% map_int(NROW)
theList %>% map_dbl(mean)
library(readr)
colorsURL<-'http://www.jaredlander.com/data/DiamondColors.csv'
diamondColors<-read.csv(colorsURL)
diamondColors
data(diamonds,package='ggplot2')
unique(diamonds$color)
library(dplyr)
left_join(diamonds,diamondColors,by=c('color'='Color'))
left_join(diamonds,diamondColors,by=c('color'='Color'))%>%select(carat,color,price,Description,Details)
left_join(diamonds,diamondColors,by=c('color'='Color'))%>%distinct(color,Description)
diamondColors%>%distinct(Color,Description)
library(readr)
emotion <- read_tsv('http://www.jaredlander.com/data/reaction.txt.')
install.packages('readr')
library(readr)
emotion <- read_tsv('http://www.jaredlander.com/data/reaction.txt.')
install.packages('curl')
library(readr)
emotion <- read_tsv('http://www.jaredlander.com/data/reaction.txt.')
emotion
View(emotion)
View(emotion)
library(tidyr)
install.packages('tidyr')
library(readr)
library(tidyr)
emotionLong<-emotion%>%gather(key=Type,value=Measurement,Age,BMI,React,Regulate)%>%arrange(id)
library(tidyr)
emotionLong<-emotion%>%gather(key=Type,value=Measurement,Age,BMI,React,Regulate)%>%arrange(id)
install.packages('stringr')
install.packages('pandoc')
av <- available.packages(filters=list())
av[av[, "Package"] == pkg, ]
av <- available.packages(filters=list())
av[av[, "Package"] == pkg, ]
av <- available.packages(filters=list())
av[av[, "Package"] == pkg, ]
av <- available.packages(filters=list())
av[av[, "Package"] == pandoc, ]
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
# Installing pandoc
install.pandoc()
install.packages('car')
install.packages('QuantPsyc')
setwd("C:/Users/wittl/Desktop/DSC520/Github Submitted Assignments/DSC520/8.2 Exercise")
heights_df <- read.csv("data/r4ds/heights.csv")
library(ggplot2)
age_lm <- lm(earn ~ age, data = heights_df)
View(age_lm)
summary(age_lm)
View(heights_df)
View(heights_df)
age_predict_df <- data.frame(earn = predict(age_lm, heights_df), age=heights_df$age)
View(age_predict_df)
View(heights_df)
ggplot(data = heights_df, aes(y = earn, x = age)) +
geom_point(color='blue') +
geom_line(color='red',data = age_predict_df, aes(y=earn, x=age))
## Sum of Squares for Error
sse <- sum(residuals^2)
mean_earn <- mean(heights_df$earn)
## Corrected Sum of Squares Total
sst <- sum((mean_earn - heights_df$earn)^2)
## Corrected Sum of Squares for Model
ssm <- sum((mean_earn - age_predict_df$earn)^2)
## Residuals
residuals <- heights_df$earn - age_predict_df$earn
## Sum of Squares for Error
sse <- sum(residuals^2)
mean_earn <- mean(heights_df$earn)
## Corrected Sum of Squares Total
sst <- sum((mean_earn - heights_df$earn)^2)
## Corrected Sum of Squares for Model
ssm <- sum((mean_earn - age_predict_df$earn)^2)
## Residuals
residuals <- heights_df$earn - age_predict_df$earn
## Sum of Squares for Error
sse <- sum(residuals^2)
## Load the `data/r4ds/heights.csv` to
```{r include = TRUE}
heights_df <- read.csv("data/r4ds/heights.csv")
```
## Load the ggplot2 library
```{r include = TRUE}
library(ggplot2)
```
## Fit a linear model using the `age` variable as the predictor and `earn` as the outcome
```{r include = TRUE}
age_lm <- lm(earn ~ age, data = heights_df)
```
## View the summary of your model using `summary()`
```{r include = TRUE}
summary(age_lm)
```
## Creating predictions using `predict()`
```{r include = TRUE}
age_predict_df <- data.frame(earn = predict(age_lm, heights_df), age=heights_df$age)
```
## Plot the predictions against the original data
```{r echo = FALSE}
ggplot(data = heights_df, aes(y = earn, x = age)) +
geom_point(color='blue') +
geom_line(color='red',data = age_predict_df, aes(y=earn, x=age))
```
## Calculated values
```{r include = TRUE}
mean_earn <- mean(heights_df$earn)
## Corrected Sum of Squares Total
sst <- sum((mean_earn - heights_df$earn)^2)
## Corrected Sum of Squares for Model
ssm <- sum((mean_earn - age_predict_df$earn)^2)
## Residuals
residuals <- heights_df$earn - age_predict_df$earn
## Sum of Squares for Error
sse <- sum(residuals^2)
```
## R Squared R^2 = SSM\SST
```{r include = TRUE}
r_squared <- ssm/sst
```
n <- nrow(heights_df)
heights_df <- read.csv("data/r4ds/heights.csv")
heights_df <- read.csv("data/r4ds/heights.csv")
## Load the `data/r4ds/heights.csv` to
```{r include = TRUE}
heights_df <- read.csv("data/r4ds/heights.csv")
```
## Load the ggplot2 library
```{r include = TRUE}
library(ggplot2)
```
## Fit a linear model using the `age` variable as the predictor and `earn` as the outcome
```{r include = TRUE}
age_lm <- lm(earn ~ age, data = heights_df)
```
## View the summary of your model using `summary()`
```{r include = TRUE}
summary(age_lm)
```
## Creating predictions using `predict()`
```{r include = TRUE}
age_predict_df <- data.frame(earn = predict(age_lm, heights_df), age=heights_df$age)
```
## Plot the predictions against the original data
```{r echo = FALSE}
ggplot(data = heights_df, aes(y = earn, x = age)) +
geom_point(color='blue') +
geom_line(color='red',data = age_predict_df, aes(y=earn, x=age))
```
## Calculated values
```{r include = TRUE}
mean_earn <- mean(heights_df$earn)
## Corrected Sum of Squares Total
sst <- sum((mean_earn - heights_df$earn)^2)
## Corrected Sum of Squares for Model
ssm <- sum((mean_earn - age_predict_df$earn)^2)
## Residuals
residuals <- heights_df$earn - age_predict_df$earn
## Sum of Squares for Error
sse <- sum(residuals^2)
```
## R Squared R^2 = SSM\SST
```{r include = TRUE}
r_squared <- ssm/sst
```
## Number of observations
```{r include = TRUE}
n <- nrow(heights_df)
```
## Load the `data/r4ds/heights.csv` to
```{r include = TRUE}
heights_df <- read.csv("data/r4ds/heights.csv")
```
## Load the ggplot2 library
```{r include = TRUE}
library(ggplot2)
```
## Fit a linear model using the `age` variable as the predictor and `earn` as the outcome
```{r include = TRUE}
age_lm <- lm(earn ~ age, data = heights_df)
```
## View the summary of your model using `summary()`
```{r include = TRUE}
summary(age_lm)
```
## Creating predictions using `predict()`
```{r include = TRUE}
age_predict_df <- data.frame(earn = predict(age_lm, heights_df), age=heights_df$age)
```
## Plot the predictions against the original data
```{r echo = FALSE}
ggplot(data = heights_df, aes(y = earn, x = age)) +
geom_point(color='blue') +
geom_line(color='red',data = age_predict_df, aes(y=earn, x=age))
```
## Calculated values
```{r include = TRUE}
mean_earn <- mean(heights_df$earn)
## Corrected Sum of Squares Total
sst <- sum((mean_earn - heights_df$earn)^2)
## Corrected Sum of Squares for Model
ssm <- sum((mean_earn - age_predict_df$earn)^2)
## Residuals
residuals <- heights_df$earn - age_predict_df$earn
## Sum of Squares for Error
sse <- sum(residuals^2)
```
## R Squared R^2 = SSM\SST
```{r include = TRUE}
r_squared <- ssm/sst
```
## Number of observations
```{r include = TRUE}
n <- nrow(heights_df)
```
heights_df <- read.csv("data/r4ds/heights.csv")
library(ggplot2)
age_lm <- lm(earn ~ age, data = heights_df)
summary(age_lm)
age_predict_df <- data.frame(earn = predict(age_lm, heights_df), age=heights_df$age)
ggplot(data = heights_df, aes(y = earn, x = age)) +
geom_point(color='blue') +
geom_line(color='red',data = age_predict_df, aes(y=earn, x=age))
mean_earn <- mean(heights_df$earn)
## Corrected Sum of Squares Total
sst <- sum((mean_earn - heights_df$earn)^2)
## Corrected Sum of Squares for Model
ssm <- sum((mean_earn - age_predict_df$earn)^2)
## Residuals
residuals <- heights_df$earn - age_predict_df$earn
## Sum of Squares for Error
sse <- sum(residuals^2)
r_squared <- ssm/sst
n <- nrow(heights_df)
r_squared <- ssm/sst
r_squared
heights_df <- read.csv("data/r4ds/heights.csv")
View(heights_df)
earn_lm <-  lm(earn ~ height + sex + ed + age + race, data=heights_df)
View(earn_lm)
summary(earn_lm)
predicted_df <- data.frame(
earn = predict(earn_lm, heights_df),
ed=heights_df$ed, race=heights_df$race, height=heights_df$height,
age=heights_df$age, sex=heights_df$sex
)
View(predicted_df)
housing_df <- read_excel("week-6-housing.xlsx")
library('readxl')
housing_df <- read_excel("week-7-housing.xlsx")
housing_df <- read_excel("data\week-7-housing.xlsx")
housing_df <- read_excel("data/week-7-housing.xlsx")
View(housing_df)
names(housing_df) <- str_replace_all(names(housing_df), c(" " = "_"))
library('stringr')
names(housing_df) <- str_replace_all(names(housing_df), c(" " = "_"))
housing_df$year_renovated[housing_df$year_renovated == 0] <- NA
earn_lm <-  lm(Sale_Price ~ sq_ft_lot, data=housing_df)
housing_df$bathroom_count <- 1*housing_df$bath_full_count + .75*housing_df$bath_3qtr_count + .5*housing_df$bath_half_count
earn_lm <-  lm(Sale_Price ~ sq_ft_lot + building_grade + square_feet_total_living + bedrooms + bathroom_count, data=housing_df)
earn_lm <-  lm(Sale_Price ~ sq_ft_lot, data=housing_df)
salesprice_lm <-  lm(Sale_Price ~ sq_ft_lot, data=housing_df)
salesprice2_lm <-  lm(Sale_Price ~ sq_ft_lot + building_grade + square_feet_total_living + bedrooms + bathroom_count, data=housing_df)
summary(salesprice_lm)
summary(salesprice2_lm)
library('QuantPsyc')
lm.beta(salesprice2_lm)
confint(salesprice2_lm)
anova(salesprice_lm, salesprice2_lm)
housing_df$standardized.residuals <- rstandard(salesprice2_lm)
housing_df$large.residual <- housing_df$standardized.residuals>2 | housing_df$standardized.residuals<-2
housing_df$large.residual <- housing_df$standardized.residuals>2 | housing_df$standardized.residuals< -2
sum(housing_df$large.residual)
housing_df[housing_df$large.residual, c("addr_full", "sale_price", "sq_ft_lot", "building_grade", "square_feet_total_living", "bedrooms", "bathroom_count", "stamdardized.residuals" )]
housing_df[housing_df$large.residual, c("addr_full", "Sale_Price", "sq_ft_lot", "building_grade", "square_feet_total_living", "bedrooms", "bathroom_count", "standardized.residuals" )]
housing_df$leverage <- hatvalues(salesprice2_lm)
housing_df$cooks.distance <- cooks.distance(salesprice2_lm)
housing_df$covariance.ratios <- covratio(salesprice2_lm)
housing_df[housing_df$large.residual, c("cooks.distance", "leverage", "covariance" )]
housing_df[housing_df$large.residual, c("cooks.distance", "leverage", "covariance.ratios" )]
potential_problems_df <- housing_df[housing_df$large.residual, c("cooks.distance", "leverage", "covariance.ratios" )]
potential_problems_df <- housing_df[housing_df$large.residual, c("addr_full", "cooks.distance", "leverage", "covariance.ratios" )]
housing_df[housing_df$cooks.distance>1]
average_leverage <- (5 + 1)/nrow(housing_df)
problem_leverage <- average_leverage*3
cvr_high <- 1+(3*(5+1)/nrow(housing_df))
cvr_low <- 1-(3*(5+1)/nrow(housing_df))
potential_problems_df$problems <- housing_df$cooks.distance>1 | housing_df$leverage>problem_leverage | housing_df$covariance.ratios>cvr_high | housing_df$covariance.ratios<cvr_low
potential_problems_df$problems <- potential_problems_df$cooks.distance>1 | potential_problems_df$leverage>problem_leverage | potential_problems_df$covariance.ratios>cvr_high | potential_problems_df$covariance.ratios<cvr_low
potential_problems_df[potential_problems_df$problems, c("addr_full", "cooks.distance", "leverage", "covariance.ratios")]
dwt(salesprice2_lm)
durbinWatsonTest(salesprice2_lm)
library('boot')
dwt(salesprice2_lm)
library('car')
dwt(salesprice2_lm)
vif(salesprice2_lm)
mean(vif(salesprice2_lm))
plot(salesprice2_lm)
hist(salesprice2_lm)
hist(housing_df$standardized.residuals)
plot(salesprice2_lm)
hist(rstudent(salesprice2_lm))
plot(salesprice2_lm)

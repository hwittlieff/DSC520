# Load the Data set
binary_df <- read.csv('data/binary-classifier-data.csv')
trinary_df <- read.csv('data/trinary-classifier-data.csv')
View(binary_df)
ggplot(binary_df, aes(x=x, y=y))+ggtitle("Binary Classifier Data")+geom_point()
# Load the Data set
library('ggplot2')
# Load the Data set
library('ggplot2')
ggplot(binary_df, aes(x=x, y=y))+ggtitle("Binary Classifier Data")+geom_point()
ggplot(trinary_df, aes(x=x y=x))+ggtitle("Trinary Classifier Data") + geom_point()
ggplot(trinary_df, aes(x=x y=y))+ggtitle("Trinary Classifier Data") + geom_point()
ggplot(trinary_df, aes(x=x, y=y))+ggtitle("Trinary Classifier Data") + geom_point()
binaryk3 <- kmeans(x=binary_df, centers=3)
View(binaryk3)
binaryk5 <- kmeans(x=binary_df, centers=5)
binaryk10 <- kmeans(x=binary_df, centers=10)
binaryk15 <- kmeans(x=binary_df, centers=15)
binaryk20 <- kmeans(x=binary_df, centers=20)
binaryk25 <- kmeans(x=binary_df, centers=25)
# trinary kmeans models
trinaryk3 <- kmeans(x=trinary_df, centers=3)
trinaryk5 <- kmeans(x=trinary_df, centers=5)
trinaryk10 <- kmeans(x=trinary_df, centers=10)
trinaryk15 <- kmeans(x=trinary_df, centers=15)
trinaryk20 <- kmeans(x=trinary_df, centers=20)
trinaryk25 <- kmeans(x=trinary_df, centers=25)
remove(binaryk10)
remove(binaryk15)
remove(binaryk20)
remove(binaryk25)
remove(binaryk3)
remove(binaryk5)
remove(trinaryk10)
remove(trinaryk5)
remove(trinary(k3))
remove(trinaryk3)
remove(trinaryk15)
remove(trainaryk20)
remove(trinaryk20)
remove(trinaryk25)
# Create training & testing datasets
binary_train <- binary_df[1:65,]
# Create training & testing datasets
binary_train <- sample(1:nrow(binary_df), 0.9 * nrow(binary_df))
install.packages('class')
View(binary_df)
# Create training & testing datasets
binary_ran <- sample(1:nrow(binary_df), 0.9 * nrow(binary_df))
trinary_ran <- sample(1:nrow(trinary_df), 0.9*nrow(trinary_df))
remove(binary_train)
binary_train <- binary_df[binary_ran,]
binary_test <- binary_df[-binary_ran,]
trinary_train <- trinary_df[trinary_ran,]
trinary_test <- trinary_df[-trinary_ran,]
binary_target_category <- binary_df[binary_ran,1]
binary_test_category <- binary_df[-binary_ran,1]
trinary_target_cateogry <- trinary_df[trinary_ran,1]
trinary_test_category <- trinary_df[-trinary_ran,1]
# Load the class package
library(class)
# Create the K Nearest Neighbors models
b3 <- knn(binary_train, binary_test, cl=binary_target_category, k=3)
b5 <- knn(binary_train, binary_test, cl=binary_target_category, k=5)
b10 <- knn(binary_train, binary_test, cl=binary_target_category, k=10)
b15 <- knn(binary_train, binary_test, cl=binary_target_category, k=15)
b20 <- knn(binary_train, binary_test, cl=binary_target_category, k=20)
b25 <- knn(binary_train, binary_test, cl=binary_target_category, k=25)
t3 <- knn(trinary_train, trinary_test, cl=trinary_target_category, k=3)
t5 <- knn(trinary_train, trinary_test, cl=trinary_target_category, k=5)
t10 <- knn(trinary_train, trinary_test, cl=trinary_target_category, k=10)
t15 <- knn(trinary_train, trinary_test, cl=trinary_target_category, k=15)
t20 <- knn(trinary_train, trinary_test, cl=trinary_target_category, k=20)
t25 <- knn(trinary_train, trinary_test, cl=trinary_target_category, k=25)
trinary_target_category <- trinary_df[trinary_ran,1]
t3 <- knn(trinary_train, trinary_test, cl=trinary_target_category, k=3)
t5 <- knn(trinary_train, trinary_test, cl=trinary_target_category, k=5)
t10 <- knn(trinary_train, trinary_test, cl=trinary_target_category, k=10)
t15 <- knn(trinary_train, trinary_test, cl=trinary_target_category, k=15)
t20 <- knn(trinary_train, trinary_test, cl=trinary_target_category, k=20)
t25 <- knn(trinary_train, trinary_test, cl=trinary_target_category, k=25)
# Create training & testing datasets
tab <- table(b3, binary_test_category)
accuracy <- function(x){sum(diag(x)/(sum(rowSums(x)))) * 100}
accuracy(tab)
btab5 <- table(b5, binary_test_category)
btab10 <- table(b10, binary_test_category)
btab15 <- table(b15, binary_test_category)
btab20 <- table(b20, binary_test_category)
btab25 <- table(b25, binary_test_category)
ttab3 <- table(t3, trinary_test_category)
ttab5 <- table(t5, trinary_test_category)
ttab10 <- table(t10, trinary_test_category)
ttab15 <- table(t15, trinary_test_category)
ttab20 <- table(t20, trinary_test_category)
ttab25 <- table(t25, trinary_test_category)
accuracy(btab3)
# Create confusion matrix
btab3 <- table(b3, binary_test_category)
accuracy(btab3)
accuracy(btab5)
accuracy(btab10)
accuracy(btab15)
accuracy(btab20)
accuracy(btab25)
accuracy(ttab3)
accuracy(ttab5)
accuracy(ttab10)
accuracy(ttab15)
accuracy(ttab20)
accuracy(ttab25)
ba5 <- accuracy(btab5)
ba3 <- accuracy(btab3)
ba5 <- accuracy(btab5)
ba10 <- accuracy(btab10)
ba15 <- accuracy(btab15)
ba20 <- accuracy(btab20)
ba25 <- accuracy(btab25)
ta3 <- accuracy(ttab3)
ta5 <- accuracy(ttab5)
ta10 <- accuracy(ttab10)
ta15 <- accuracy(ttab15)
ta20 <- accuracy(ttab20)
ta25 <- accuracy(ttab25)
# Create a df of binary model accuracies
ba_df <- data.frame(3, ba3)
View(ba_df)
names(ba_df) <- c("K", "Accuracy")
View(ba_df)
ba3 <- c(3,accuracy(btab3))
# Create a df of binary model accuracies
ba_df <- data.frame(ba3, ba5, ba10, ba15, ba20, ba25)
names(ba_df) <- c("K", "Accuracy")
View(ba_df)
# Create a df of binary model accuracies
ba_df <- data.frame(ba3)
# Create a df of binary model accuracies
ba_df <- data.frame()
names(ba_df) <- c("K", "Accuracy")
rbind(ba_df, ba3)
View(ba_df)
# Create a df of binary model accuracies
ba_df <- data.frame(ba3, ba5, ba10, ba15, ba20, ba20)
remove(ba_df)
# Create a df of binary model accuracies
ba_df <- data.frame(ba3, ba5, ba10, ba15, ba20, ba20)
View(ba_df)
# Create a df of binary model accuracies
ba_df <- data.frame(ba3, ba5, ba10, ba15, ba20, ba25)
ta_df <- ks, c(ta3, ta5, ta10, ta15, ta20, ta25)
ta_df <- data.frame(ks, c(ta3, ta5, ta10, ta15, ta20, ta25))
# Create a df of binary model accuracies
ks <- c(3, 5, 10, 15, 20, 25)
ta_df <- data.frame(ks, c(ta3, ta5, ta10, ta15, ta20, ta25))
View(ta_df)
names(ta_df) <- c("K", "Accuracy")
ba3 <- accuracy(btab3)
ba5 <- accuracy(btab5)
ba10 <- accuracy(btab10)
ba15 <- accuracy(btab15)
ba20 <- accuracy(btab20)
ba25 <- accuracy(btab25)
ba_df <- data.frame(ks, c(ba3, ba5, ba10, ba15, ba20, ba25))
names(ba_df) <- c("K", "Accuracy")
ggplot(ba_df, aes(x=K, y=Accuracy))+ggtitle("Binary K Nearest Neighbors Accuracy")+geom_point()
ggplot(ta_df, aes(x=K, y=Accuracy))+ggtitle("Trinary K Nearest Neighbors Accuracy")+geom_point()
# Load the Data set
clustering_df <- read.csv('data/clustering-data.csv')
View(clustering_df)
ggplot(clustering_df, aes(x=x, y=y))+ggtitle("Clustering Data")+geom_point()
# binary kmeans models
mariok2 <- kmeans(x=clustering_df, centers=2)
mariok3 <- kmeans(x=clustering_df, centers=3)
mariok4 <- kmeans(x=clustering_df, centers=4)
mariok5 <- kmeans(x=clustering_df, centers=5)
mariok6 <- kmeans(x=clustering_df, centers=6)
mariok7 <- kmeans(x=clustering_df, centers=7)
mariok8 <- kmeans(x=clustering_df, centers=8)
mariok9 <- kmeans(x=clustering_df, centers=9)
mariok10 <- kmeans(x=clustering_df, centers=10)
mariok11 <- kmeans(x=clustering_df, centers=11)
mariok12 <- kmeans(x=clustering_df, centers=12)
install.packages('useful')
plot(mariok2, data=clustering_df)
plot.kmeans(mariok2, data=clustering_df)
plot(mariok2, data=clustering_df)
View(mariok2)
set.seed(123)
mariok2 <- kmeans(x=clustering_df, centers=2)
mariok3 <- kmeans(x=clustering_df, centers=3)
mariok4 <- kmeans(x=clustering_df, centers=4)
mariok5 <- kmeans(x=clustering_df, centers=5)
mariok6 <- kmeans(x=clustering_df, centers=6)
mariok7 <- kmeans(x=clustering_df, centers=7)
mariok8 <- kmeans(x=clustering_df, centers=8)
mariok9 <- kmeans(x=clustering_df, centers=9)
mariok10 <- kmeans(x=clustering_df, centers=10)
mariok11 <- kmeans(x=clustering_df, centers=11)
mariok12 <- kmeans(x=clustering_df, centers=12)
set.seed(123)
mariok2 <- kmeans(x=clustering_df, centers=2)
mariok3 <- kmeans(x=clustering_df, centers=3)
mariok4 <- kmeans(x=clustering_df, centers=4)
mariok5 <- kmeans(x=clustering_df, centers=5)
mariok6 <- kmeans(x=clustering_df, centers=6)
mariok7 <- kmeans(x=clustering_df, centers=7)
mariok8 <- kmeans(x=clustering_df, centers=8)
mariok9 <- kmeans(x=clustering_df, centers=9)
mariok10 <- kmeans(x=clustering_df, centers=10)
mariok11 <- kmeans(x=clustering_df, centers=11)
mariok12 <- kmeans(x=clustering_df, centers=12)
## iii. Create a scatter plot of the resultant clusters for each value of k.
```{r echo = TRUE}
library(useful)
plot(mariok2, data=clustering_df)
```
## iii. Create a scatter plot of the resultant clusters for each value of k.
```{r echo = TRUE}
library(useful)
plot(mariok2, data=clustering_df)
```
mariok2 <- kmeans(x=clustering_df, centers=2, nstart = 25)
mariok2 <- kmeans(x=clustering_df, centers=2, nstart = 25)
mariok3 <- kmeans(x=clustering_df, centers=3, nstart = 25)
install.packages('factoextra')
mariok4 <- kmeans(x=clustering_df, centers=4, nstart = 25)
mariok5 <- kmeans(x=clustering_df, centers=5, nstart = 25)
mariok6 <- kmeans(x=clustering_df, centers=6, nstart = 25)
mariok7 <- kmeans(x=clustering_df, centers=7, nstart = 25)
mariok8 <- kmeans(x=clustering_df, centers=8, nstart = 25)
mariok8 <- kmeans(x=clustering_df, centers=8, nstart = 25)
mariok9 <- kmeans(x=clustering_df, centers=9, nstart = 25)
mariok10 <- kmeans(x=clustering_df, centers=10, nstart = 25)
mariok11 <- kmeans(x=clustering_df, centers=11, nstart = 25)
mariok12 <- kmeans(x=clustering_df, centers=12, nstart = 25)
library(factoextra)
plot(mariok2, data=clustering_df)
plot(mariok2, data=clustering_df, title="k=2")
marioBest <- FitKMeans(clustering_df, max.clusters=12, nstart=25, seed=123)
PlotHartigan(marioBest)
kmean_withinss <- function (k) {cluster<- kmeans(clustering_df, k) return (cluster$tot.withinss)}
kmean_withinss <- function(k) {
cluster <- kmeans(rescale_df, k)
return (cluster$tot.withinss)
}
kmean_withinss(2)
cluster <- kmeans(clustering_df, k)
kmean_withinss <- function(k) {
cluster <- kmeans(clustering_df, k)
return (cluster$tot.withinss)
}
kmean_withinss(2)
wss <- sapply(2:max_k, kmean_withinss)
max_k <- 12
wss <- sapply(2:max_k, kmean_withinss)
elbow <- data.frame(2:max_k, wss)
View(elbow)
ggplot(elbow, aes(x = X2.max_k, y = wss)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(1, 20, by = 1))
ggplot(elbow, aes(x = X2.max_k, y = wss)) +
geom_point() +
geom_line())
ggplot(elbow, aes(x = X2.max_k, y = wss)) +
geom_point() +
geom_line()
View(binary_test)
View(binary_df)

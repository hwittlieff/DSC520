1+1
1+2+3
3*7*2
4/2
4/3
x<-4
x
rm(x)
x
i<-5L
i
is.integer(i)
nchar('harlan')
5:-7
?+
6
apropos("mea")
x>-10:1
x <- 10:1
y <- -4:5
q <-c("Hockey","Football","Baseball","Curling","Rugby","Lacrosse","Basketball","Tennis","Cricket","soccer")
theDF <-data.fram(c,y,q)
theDF <-data.fame(x,y,q)
theDF <-data.frame(x,y,q)
theDF
theDF <-data.frame(First=x,Second=y,Sport=q)
theDF
theDF[,3]
list(1,2,3)
theUrl<-"http://www.jaredlander.com/data/TomatoFirst.csv"
tomato<-read.table(file=theUrl,header=TRUE,sep=",")
head(tomato)
download.file("http://www.jaredlander.com/data/diamonds.db", destfile="data/diamonds.db",mode='wb')
download.file("http://www.jaredlander.com/data/diamonds.db", destfile="data/diamonds.db",mode='wb')
download.file("http://www.jaredlander.com/data/diamonds.db", destfile="diamonds.db",mode='wb')
install.packages('dbplyr')
diaDBSource2<-DBI::dbConnect(RSQLite::SQLite(),"diamonds.db")
View(diaDBSource2)
<SQLiteConnection>
<SQLiteConnection>
SQLiteConnection
diaTab <-tbl(diaDBSource2,"diamonds")
library('dplyr')
diaTab <-tbl(diaDBSource2,"diamonds")
diaTab
diaTab %>% group_by(cut) %>% dplyr::summarize(Price=mean(price))
install.packages('purrr')
theList <-(A=matrix(1:9,3),B=1:5,C=matrix(1:4,2),D=2)
theList <-(A=matrix(1:9,3),B=1:5,C=matrix(1:4,2),D=2)
theList <-list(A=matrix(1:9,3),B=1:5,C=matrix(1:4,2),D=2)
lapply(theList,sum)
library(purrr)
theList %>% map(sum)
theList2 <- theList
theList2[[1]][2,1] <-NA
theList2[[2]][4]<-NA
theList2
theList2 %>% map(function(x)sum(x,na.rm=TRUE))
theList <-list(A=matrix(1:9,3),B=1:5,C=matrix(1:4,2),D=2)
theList2
theList2 %>% map(sum,na.rm=TRUE))
theList2 %>% map(sum,na.rm=TRUE)
theList %>% map_int(NROW)
theList %>% map_dbl(mean)
library(readr)
colorsURL<-'http://www.jaredlander.com/data/DiamondColors.csv'
diamondColors<-read.csv(colorsURL)
diamondColors
data(diamonds,package='ggplot2')
unique(diamonds$color)
library(dplyr)
left_join(diamonds,diamondColors,by=c('color'='Color'))
left_join(diamonds,diamondColors,by=c('color'='Color'))%>%select(carat,color,price,Description,Details)
left_join(diamonds,diamondColors,by=c('color'='Color'))%>%distinct(color,Description)
diamondColors%>%distinct(Color,Description)
library(readr)
emotion <- read_tsv('http://www.jaredlander.com/data/reaction.txt.')
install.packages('readr')
library(readr)
emotion <- read_tsv('http://www.jaredlander.com/data/reaction.txt.')
install.packages('curl')
library(readr)
emotion <- read_tsv('http://www.jaredlander.com/data/reaction.txt.')
emotion
View(emotion)
View(emotion)
library(tidyr)
install.packages('tidyr')
library(readr)
library(tidyr)
emotionLong<-emotion%>%gather(key=Type,value=Measurement,Age,BMI,React,Regulate)%>%arrange(id)
library(tidyr)
emotionLong<-emotion%>%gather(key=Type,value=Measurement,Age,BMI,React,Regulate)%>%arrange(id)
install.packages('stringr')
install.packages('pandoc')
av <- available.packages(filters=list())
av[av[, "Package"] == pkg, ]
av <- available.packages(filters=list())
av[av[, "Package"] == pkg, ]
av <- available.packages(filters=list())
av[av[, "Package"] == pkg, ]
av <- available.packages(filters=list())
av[av[, "Package"] == pandoc, ]
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
# Installing pandoc
install.pandoc()
install.packages('foreign')
# Load the Thoracic Surgery Data set
library('foreign')
setwd("C:/Users/wittl/Desktop/DSC520/Github Submitted Assignments/DSC520/10.2 Exercise")
thoraric_df <- read.arff('data/ThoraricSurgery.arff')
View(thoraric_df)
View(thoraric_df)
View(thoraric_df)
mymodel <- glm(Risk1YR ~ AGE + PRE32 + PRE30, data = thoraric_df, family = 'binomial')
mymodel <- glm(Risk1Yr ~ AGE + PRE32 + PRE30, data = thoraric_df, family = 'binomial')
summary(mymodel)
summary(mymodel)
# Update PRE14 to numberical values based on size
thoraric_df$PRE14 <- gsub("[a-zA-z ]", "", thoraric_df$PRE14)
thoraric_df$PRE14 <- as.numeric(thoraric_df$PRE14)
mymodel <- glm(Risk1Yr ~ AGE + PRE14 + PRE32 + PRE30, data = thoraric_df, family = 'binomial')
summary(mymodel)
mymodel <- glm(Risk1Yr ~ AGE + PRE14, data = thoraric_df, family = 'binomial')
summary(mymodel)
# Load the Thoracic Surgery Data set
library('foreign')
thoraric_df <- read.arff('data/ThoraricSurgery.arff')
## i. Fit a binary logistic regression model to the data set that predicts whether or not the patient survived for one year (the Risk1Y variable) after the surgery. Use the glm() function to perform the logistic regression. See Generalized Linear Models for an example. Include a summary using the summary() function in your results.
```{r include = TRUE}
# Update PRE14 to numerical values based on size
thoracic_df$PRE14 <- gsub("[a-zA-z ]", "", thoracic_df$PRE14)
thoracic_df <- read.arff('data/ThoraricSurgery.arff')
## i. Fit a binary logistic regression model to the data set that predicts whether or not the patient survived for one year (the Risk1Y variable) after the surgery. Use the glm() function to perform the logistic regression. See Generalized Linear Models for an example. Include a summary using the summary() function in your results.
```{r include = TRUE}
# Update PRE14 to numerical values based on size
thoracic_df$PRE14 <- gsub("[a-zA-z ]", "", thoracic_df$PRE14)
thoracic_df$PRE14 <- as.numeric(thoracic_df$PRE14)
mymodel <- glm(Risk1Yr ~ AGE + PRE14, data = thoraric_df, family = 'binomial')
summary(mymodel)
# Update PRE14 to numerical values based on size
thoracic_df$PRE14 <- gsub("[a-zA-z ]", "", thoracic_df$PRE14)
dm.remove(thoraric_df)
remove(thoracic_df)
thoracic_df <- read.arff('data/ThoraricSurgery.arff')
remove(thoracic_df)
remove(mymodel)
remove(thoraric_df)
thoracic_df <- read.arff('data/ThoraricSurgery.arff')
# Update PRE14 to numerical values based on size
thoracic_df$PRE14 <- gsub("[a-zA-z ]", "", thoracic_df$PRE14)
View(thoracic_df)
thoracic_df$PRE14 <- as.numeric(thoracic_df$PRE14)
mymodel <- glm(Risk1Yr ~ PRE7 + PRE8 + PRE9 + PRE10 + PRE11 + PRE14, data = thoraric_df, family = 'binomial')
mymodel <- glm(Risk1Yr ~ PRE7 + PRE8 + PRE9 + PRE10 + PRE11 + PRE14, data = thoracic_df, family = 'binomial')
summary(mymodel)
mymodel <- glm(Risk1Yr ~ PRE9 + PRE11 + PRE14, data = thoracic_df, family = 'binomial')
summary(mymodel)
res
res <- predict(mymodel, thoracic_df, type="response")
res
confmatrix <- table(Actual_Value=thoracic_df$Risk1Yr, Predicted_Value = res >0.5)
confmatrix
(confmatrix[[1,1]] + confmatrix[[2,2]] / sum(confmatrix)
accuracy < - (confmatrix[[1,1]] + confmatrix[[2,2]] / sum(confmatrix)
accuracy < - (confmatrix[[1,1]] + confmatrix[[2,2]]) / sum(confmatrix)
accuracy
accuracy <- (confmatrix[[1,1]] + confmatrix[[2,2]]) / sum(confmatrix)
accuracy
confmatrix
# Load the Data set
binary_df <- read.csv('data/binary-classifier-data.csv')
View(binary_df)
mymodel_binary <- glm(label ~ x + y, data = binary_df, family = 'binomial')
summary(mymodel)
res_binary <- predict(mymodel_binary, binary_df, type="response")
confmatrix_binary <- table(Actual_Value=binary_df$label, Predicted_Value = res_binary >0.5)
confmatrix_binary
accuracy_binary <- (confmatrix_binary[[1,1]] + confmatrix_binary[[2,2]]) / sum(confmatrix_binary)
accuracy_binary
